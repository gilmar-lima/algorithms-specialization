#include <iostream>

long long get_fibonacci_huge_naive(long long n, long long m) {
    if (n <= 1)
        return n;

    long long previous = 0;
    long long current  = 1;

    for (long long i = 0; i < n - 1; ++i) {
        long long tmp_previous = previous;
        previous = current;
        current = tmp_previous + current;
    }

    return current % m;
}

long long fibonacci_fast(long long n) {
    
  long long sequence[2] = {0, 1};
  long long nextNumber = 0;

  if(n <= 1)
    return n;    
    
  for(int i = 2; i <= n; i++){

    nextNumber = sequence[0] + sequence[1];
    sequence[0] = sequence[1];
    sequence[1] = nextNumber;
  }
  
  return nextNumber;
}

long long pisano_period_length(long long m){
    
    long long prev = 0;
    long long curr = 1;
    long long res = 0;
     
    for(int i = 0; i < m * m; i++)
    {
        long long temp = 0;
        temp = curr;
        curr = (prev + curr) % m;
        prev = temp;
         
        if (prev == 0 && curr == 1)
            res= i + 1; 
    }
    return res;
}

long long get_fibonacci_huge_fast(long long n, long long m) {

    long long remainder = 0;
    long long result = 0;
    
    remainder = n % pisano_period_length(m);
    result = fibonacci_fast(remainder) % m;

    return result;
}

int main() {
    long long n, m;
    std::cin >> n >> m;
    std::cout << get_fibonacci_huge_naive(n, m) << '\n';
}
